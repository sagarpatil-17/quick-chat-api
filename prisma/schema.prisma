// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  email     String   @unique
  password  String
  about     String?  @default("Available")
  role      String
  createdAt DateTime @default(now())

  groups                 groupsOnUsers[]
  group_messages         group_messages[]
  sentMessages           messages[]        @relation("UserSentMessages") // Messages sent by the user
  receivedMessages       messages[]        @relation("UserReceivedMessages") // Messages received by the user
  sentFriendRequests     friend_requests[] @relation("FriendRequestSender")
  receivedFriendRequests friend_requests[] @relation("FriendRequestReceiver")
  friends                friends[]         @relation("UserToFriend")
  friendships            friends[]         @relation("FriendToUser")
}

model friend_requests {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  status     String   @default("pending") // pending, accepted, rejected
  createdAt  DateTime @default(now())

  sender   users @relation("FriendRequestSender", fields: [senderId], references: [id])
  receiver users @relation("FriendRequestReceiver", fields: [receiverId], references: [id])
}

model friends {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  friendId  String   @db.ObjectId
  createdAt DateTime @default(now())

  user   users @relation("UserToFriend", fields: [userId], references: [id])
  friend users @relation("FriendToUser", fields: [friendId], references: [id])
}

model groups {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  createdBy   String
  createdAt   DateTime @default(now())

  users    groupsOnUsers[]
  messages group_messages[]
}

model group_messages {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId  String   @db.ObjectId // User who sent the message
  groupId   String   @db.ObjectId // Group ID
  content   String
  timestamp DateTime @default(now())

  sender users  @relation(fields: [senderId], references: [id])
  group  groups @relation(fields: [groupId], references: [id])
}

model messages {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId // User who sent the message
  receiverId String   @db.ObjectId // User who received the message
  content    String
  timestamp  DateTime @default(now())

  sender   users @relation("UserSentMessages", fields: [senderId], references: [id])
  receiver users @relation("UserReceivedMessages", fields: [receiverId], references: [id])

  @@index([senderId]) // Index for faster queries by sender
  @@index([receiverId]) // Index for faster queries by receiver
}

model groupsOnUsers {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  groupId String @db.ObjectId

  user  users  @relation(fields: [userId], references: [id])
  group groups @relation(fields: [groupId], references: [id])
}
